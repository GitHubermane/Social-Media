{"version":3,"file":"static/js/144.e864cdac.chunk.js","mappings":"uMACA,GAAgB,aAAe,8BAA8B,cAAgB,+BAA+B,kBAAoB,mCAAmC,eAAiB,gCAAgC,gBAAkB,kCCAtO,EAA0B,0B,SCObA,EAAgC,SAACC,GAC5C,OACE,0BACE,cAAGC,UAAWC,EAAd,SAAsCF,EAAMG,U,UCVlD,EAA6B,0BCQhBC,EAA6B,SAACJ,GACzC,OACE,SAAC,KAAD,CAASK,GAAE,UAAKL,EAAMM,IAAML,UAAWM,EAAvC,SACGP,EAAMQ,QCCAC,EAA+B,SAACT,GAC3C,IAAMU,GAAkBC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,aAAaH,mBAChFI,GAAeH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,aAAaE,gBAEnEC,EAAkBN,EAAgBO,KACpC,SAAAC,GAAM,OAAI,SAACd,EAAD,CACRE,GAAIY,EAAOZ,GAEXE,KAAMU,EAAOV,MADRU,EAAOZ,OAEda,EAAkBL,EAAaG,KAC7B,SAAAG,GAAO,OAAI,SAACrB,EAAD,CACTO,GAAIc,EAAQd,GAEZH,KAAMiB,EAAQjB,MADTiB,EAAQd,OAGnB,OACE,iBAAKL,UAAWoB,EAAAA,aAAhB,WACE,gBAAKpB,UAAWoB,EAAAA,WAAhB,SACGL,KAEH,iBAAKf,UAAWoB,EAAAA,cAAhB,UACGF,GACD,SAACG,GAAD,UAAiBtB,WAMZsB,EAAc,SAACtB,GAK1B,OACE,SAAC,KAAD,CACEuB,SANqB,SAACC,GACxBxB,EAAMyB,YAAYD,EAAYE,SAC9BF,EAAYE,QAAU,IAGtB,SAEG,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBACE1B,UAAWoB,EAAAA,kBACXE,SAAUI,EAFZ,WAGE,0BACE,SAAC,KAAD,CACE1B,UAAWoB,EAAAA,eACXb,KAAK,UACLoB,UAAU,QACVC,YAAY,kBAGhB,mBACE5B,UAAWoB,EAAAA,gBACXS,KAAK,SAFP,UAGE,gBAAKC,IAAI,qFAAqFC,IAAI,c,uCC3D1GC,EAA6B,SAACrB,GAAD,MAA0B,CACvDsB,aAActB,EAAMuB,KAAKD,e,ICuB7B,GAAeE,E,QAAAA,KACbC,EAAAA,EAAAA,IAAQ,KAAM,CAAEZ,YAAAA,EAAAA,GAAaa,WAAAA,EAAAA,MDlBxB,SAA+BC,GAclC,OADqCF,EAAAA,EAAAA,IAAQJ,EAARI,EAZa,SAACrC,GACXA,EAA9BkC,aAAN,IAAuBM,GAAvB,OAAoCxC,EAApC,GACA,OAAIA,EAAMkC,cAEF,SAACK,GAAD,UAAsBC,KAItB,SAAC,KAAD,CAAUnC,GAAG,gBCQ7B,EAT8C,SAACL,GAE7C,OADAA,EAAMsC,cAEJ,SAAC7B,EAAD,CACEgB,YAAazB,EAAMyB","sources":["webpack://project/./src/Components/Content/Dialogs/Dialogs.module.css?1178","webpack://project/./src/Components/Content/Dialogs/Messages/Messages.module.css?4f82","Components/Content/Dialogs/Messages/Messages.tsx","webpack://project/./src/Components/Content/Dialogs/Users/Users.module.css?78c1","Components/Content/Dialogs/Users/Users.tsx","Components/Content/Dialogs/Dialogs.tsx","Components/HOC/AuthRedirect.tsx","Components/Content/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsBlock\":\"Dialogs_dialogsBlock__L0XYu\",\"messagesBlock\":\"Dialogs_messagesBlock__+cZuH\",\"messageInputBlock\":\"Dialogs_messageInputBlock__AOo+g\",\"message__input\":\"Dialogs_message__input__MOitd\",\"message__button\":\"Dialogs_message__button__jy2Un\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Messages_message__AgKcB\"};","import React from 'react'\r\n//@ts-ignore\r\nimport MessagesStyle from './Messages.module.css'\r\ntype propsType = {\r\n  text: string\r\n  id: number\r\n  key: number\r\n}\r\nexport const Messages: React.FC<propsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <p className={MessagesStyle.message}>{props.text}</p>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user__item\":\"Users_user__item__teNyi\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n//@ts-ignore\r\nimport UsersStyle from './Users.module.css'\r\n\r\ntype propsType = {\r\n  id: number\r\n  name: string\r\n}\r\nexport const Users: React.FC<propsType> = (props) => {\r\n  return (\r\n    <NavLink to={`${props.id}`} className={UsersStyle.user__item}>\r\n      {props.name}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Field, Form } from 'react-final-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { appStateType } from '../../../Redux/ReduxStore';\r\nimport { MessagesDataType, UserMessageDataType } from '../../../Types/ReducersTypes';\r\n//@ts-ignore\r\nimport DialogsStyle from './Dialogs.module.css';\r\nimport { Messages } from './Messages/Messages';\r\nimport { Users } from './Users/Users';\r\n\r\ntype propsType = {\r\n  sendMessage: (message: string) => void\r\n}\r\nexport const Dialogs: React.FC<propsType> = (props) => {\r\n  const UserMessageData = useSelector((state: appStateType) => state.MessagesPage.UserMessageData),\r\n  messagesData = useSelector((state: appStateType) => state.MessagesPage.MessagesData)\r\n  \r\n  let UserChatElement = UserMessageData.map(\r\n    dialog => <Users\r\n      id={dialog.id}\r\n      key={dialog.id}\r\n      name={dialog.name} />),\r\n    MessagesElement = messagesData.map(\r\n      message => <Messages\r\n        id={message.id}\r\n        key={message.id}\r\n        text={message.text} />)\r\n\r\n  return (\r\n    <div className={DialogsStyle.dialogsBlock}>\r\n      <div className={DialogsStyle.usersBlock}>\r\n        {UserChatElement}\r\n      </div>\r\n      <div className={DialogsStyle.messagesBlock}>\r\n        {MessagesElement}\r\n        <MessageForm {...props} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const MessageForm = (props: propsType) => {\r\n  let onSendMessageClick = (messageText: any) => {\r\n    props.sendMessage(messageText.Message)\r\n    messageText.Message = ''\r\n  }\r\n  return (\r\n    <Form\r\n      onSubmit={onSendMessageClick}>\r\n      {({ handleSubmit }) => (\r\n        <form\r\n          className={DialogsStyle.messageInputBlock}\r\n          onSubmit={handleSubmit}>\r\n          <div>\r\n            <Field\r\n              className={DialogsStyle.message__input}\r\n              name=\"Message\"\r\n              component=\"input\"\r\n              placeholder=\"Enter text\"\r\n            />\r\n          </div>\r\n          <button\r\n            className={DialogsStyle.message__button}\r\n            type='submit'>\r\n            <img src=\"https://www.seekpng.com/png/full/51-512819_png-file-svg-whatsapp-send-icon-png.png\" alt=\"\" />\r\n          </button>\r\n        </form>\r\n      )}\r\n    </Form>\r\n  )\r\n}","import React, { ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { appStateType } from '../../Redux/ReduxStore'\r\n\r\nlet mapStateToPropsForRedirect = (state: appStateType) => ({\r\n    isAuthorised: state.Auth.isAuthorised\r\n})\r\n\r\ntype mapPropsType = {\r\n    isAuthorised: boolean | null\r\n}\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<mapPropsType> = (props) => {\r\n        let { isAuthorised, ...restProps} = props\r\n        if (props.isAuthorised) {\r\n            return (\r\n                <WrappedComponent {...restProps as WCP} />\r\n            )\r\n        } else {\r\n            return (\r\n                <Navigate to='/login' />\r\n            )\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport { getDialogs, sendMessage } from '../../../Redux/MessageReducer'\r\nimport { Dialogs } from './Dialogs';\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../HOC/AuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { MessagesDataType, UserMessageDataType } from '../../../Types/ReducersTypes';\r\nimport { appStateType } from '../../../Redux/ReduxStore';\r\n\r\ntype mapStateToPropsType = {\r\n  UserMessageData: Array<UserMessageDataType>\r\n  messagesData: Array<MessagesDataType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n  getDialogs: () => void\r\n  sendMessage: (message: string) => void\r\n}\r\ntype propsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nconst DialogsContainer: React.FC<propsType> = (props) => {\r\n  props.getDialogs()\r\n  return (\r\n    <Dialogs\r\n      sendMessage={props.sendMessage}\r\n    />\r\n  )\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(null, { sendMessage, getDialogs }),\r\n  withAuthRedirect,\r\n)(DialogsContainer)\r\n"],"names":["Messages","props","className","MessagesStyle","text","Users","to","id","UsersStyle","name","Dialogs","UserMessageData","useSelector","state","MessagesPage","messagesData","MessagesData","UserChatElement","map","dialog","MessagesElement","message","DialogsStyle","MessageForm","onSubmit","messageText","sendMessage","Message","handleSubmit","component","placeholder","type","src","alt","mapStateToPropsForRedirect","isAuthorised","Auth","compose","connect","getDialogs","WrappedComponent","restProps"],"sourceRoot":""}