{"version":3,"file":"static/js/181.50653a1d.chunk.js","mappings":"gPAkBaA,EAAqC,SAAC,GAAqC,EAAnCC,MAAoC,IAA7BC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,OAAsB,aAC9EC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,gBAAKC,UAAWC,EAAAA,EAAAA,sBAAhB,UACI,2BACKN,EAAMO,SACNL,IAAY,iBAAMG,UAAWC,EAAAA,EAAAA,iBAAjB,0CAMhBE,EAA0B,SAACR,GACpC,OAAO,SAACH,GAAD,kBAAeG,GAAf,cAAsB,6BAAUS,YAAaT,EAAMS,aAAiBT,EAAMF,YAGxEY,EAAuB,SAACV,GACjC,OAAO,SAACH,GAAD,kBAAeG,GAAf,cAAsB,0BAAOS,YAAaT,EAAMS,aAAiBT,EAAMF,a,8PCfrEa,EAA6B,SAACX,GACzC,OAAIA,EAAMY,cAEN,SAAC,KAAD,CAAUC,GAAE,mBAAcb,EAAMc,OAIlC,4BACE,mCACA,iBAAKT,UAAWC,EAAAA,EAAAA,iBAAhB,WACE,SAACS,GAAD,UAAef,KACf,iBAAKK,UAAWC,EAAAA,EAAAA,gBAAhB,WACE,gBAAKD,UAAWC,EAAAA,EAAAA,qBAAhB,iJAGA,gBAAKD,UAAWC,EAAAA,EAAAA,qBAAhB,wCAGA,gBAAKD,UAAWC,EAAAA,EAAAA,wBAAhB,sCAgBJS,EAAY,SAACf,GAKjB,OACE,SAAC,KAAD,CACEgB,SANW,SAACC,GACdjB,EAAMkB,aACNlB,EAAMmB,MAAMF,EAAKN,MAAOM,EAAKG,SAAUH,EAAKI,WAAYJ,EAAKK,UAG7D,SAEG,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAMP,SAAUO,EAAhB,WACE,0BACE,SAAC,KAAD,CACEC,KAAK,QACLC,UAAWf,EAAAA,GACXD,YAAY,QACZiB,SAAWC,EAAAA,OAGf,0BACE,SAAC,KAAD,CACEH,KAAK,WACLC,UAAWf,EAAAA,GACXD,YAAY,WACZmB,KAAK,WACLF,SAAWC,EAAAA,MAGd3B,EAAMI,QACL,gBAAKC,UAAWC,EAAAA,EAAAA,wBAAhB,SACGN,EAAMI,SAEX,4BACE,SAAC,KAAD,CACEoB,KAAK,aACLC,UAAU,QACVG,KAAK,aAJT,kBAOA,0BACE,mBAAQA,KAAK,SAAb,sBAKD5B,EAAM6B,aACL,4BACE,gBAAKC,IAAK9B,EAAM6B,WAAYE,IAAI,MAChC,SAAC,KAAD,CACEP,KAAK,UACLC,UAAWf,EAAAA,GACXD,YAAY,UACZiB,SAAWC,EAAAA,cC/EdK,EAAb,0IACI,WACI,OACI,SAACrB,EAAD,CACIG,GAAImB,KAAKjC,MAAMc,GACfF,aAAcqB,KAAKjC,MAAMY,aACzBiB,WAAYI,KAAKjC,MAAM6B,WACvBzB,MAAO6B,KAAKjC,MAAMI,MAClBe,MAAOc,KAAKjC,MAAMmB,MAClBe,QAASD,KAAKjC,MAAMkC,QACpBhB,WAAYe,KAAKjC,MAAMkB,iBAVvC,GAAoCiB,EAAAA,WAwBpC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KATkB,SAACC,GACnB,MAAO,CACHxB,GAAIwB,EAAMC,KAAKzB,GACfF,aAAc0B,EAAMC,KAAK3B,aACzBiB,WAAYS,EAAMC,KAAKV,WACvBzB,MAAOkC,EAAMC,KAAKnC,SAIG,CAAEe,MAAAA,EAAAA,GAAOe,QAAAA,EAAAA,GAAShB,WAAAA,EAAAA,KAD/C,CAEEP,I,qDCpDK,IAAMgB,EAAW,SAACa,GACrB,IAAIA,EACJ,MAAO,sB,mBCDX,KAAgB,iBAAmB,qCAAqC,gBAAkB,oCAAoC,qBAAuB,yCAAyC,wBAA0B,4CAA4C,qBAAuB,yCAAyC,iBAAmB,qCAAqC,sBAAwB","sources":["Components/Commons/CraftForms.tsx","Components/Content/Login/Login.tsx","Components/Content/Login/LoginContainer.tsx","Components/Utils/Validators.ts","webpack://project/./src/Components/Commons/CraftForms.module.css?a41f"],"sourcesContent":["import React from 'react'\r\nimport { FieldInputProps, FieldMetaState } from 'react-final-form';\r\n//@ts-ignore\r\nimport CraftFormsStyle from './CraftForms.module.css'\r\n\r\ntype propsType = {\r\n    children: undefined | typeof React.Children \r\n    input: FieldInputProps<string | number | undefined, HTMLElement>;\r\n    meta: any\r\n    placeholder: string\r\n    render: any\r\n}\r\ntype craftFormType = {\r\n    input: FieldInputProps<string | number | undefined, HTMLElement>;\r\n    meta: any;\r\n    children: undefined | typeof React.Children\r\n    child: any\r\n}\r\nexport const CraftForm: React.FC<craftFormType> = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={CraftFormsStyle.CraftForm__blockInput}>\r\n            <div>\r\n                {props.children}\r\n                {hasError && <span className={CraftFormsStyle.CraftForm__error}>This Field is required</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<any> = (props) => {\r\n    return <CraftForm {...props}><textarea placeholder={props.placeholder} {...props.input}/></CraftForm>\r\n}\r\n\r\nexport const Input: React.FC<any> = (props) => {\r\n    return <CraftForm {...props}><input placeholder={props.placeholder} {...props.input}/></CraftForm>\r\n}\r\n","import React from 'react'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { Input } from '../../Commons/CraftForms'\r\nimport { required } from '../../Utils/Validators'\r\n//@ts-ignore\r\nimport CraftFormsStyle from './../../Commons/CraftForms.module.css'\r\n\r\ntype propsType = {\r\n  isAuthorised: boolean\r\n  id: null | number\r\n  captchaURL: string\r\n  error: null | Array<string>\r\n  getAuth: () => void\r\n  login: (Login: string,\r\n    Password: string,\r\n    RememberMe: boolean,\r\n    Captcha: string) => void\r\n  getCaptcha: () => void\r\n}\r\nexport const Login: React.FC<propsType> = (props) => {\r\n  if (props.isAuthorised) {\r\n    return (\r\n      <Navigate to={`/profile/${props.id}`} />\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <div className={CraftFormsStyle.CraftForm__block}>\r\n        <LoginForm {...props} />\r\n        <div className={CraftFormsStyle.CraftForm__info}>\r\n          <div className={CraftFormsStyle.CraftForm__infoTitle}>\r\n            Логин и пароль для гостей\r\n          </div>\r\n          <div className={CraftFormsStyle.CraftForm__infoLogin}>\r\n            Login: free@samuraijs.com\r\n          </div>\r\n          <div className={CraftFormsStyle.CraftForm__infoPassword}>\r\n            Password: free\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\ntype onSubmitDataType = {\r\n  Login: string\r\n  Password: string\r\n  RememberMe: boolean\r\n  Captcha: string\r\n}\r\nconst LoginForm = (props: propsType) => {\r\n  let onSubmit = (data: onSubmitDataType) => {\r\n    props.getCaptcha()\r\n    props.login(data.Login, data.Password, data.RememberMe, data.Captcha)\r\n  }\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}>\r\n      {({ handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <Field\r\n              name=\"Login\"\r\n              component={Input}\r\n              placeholder=\"Login\"\r\n              validate={(required)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Field\r\n              name=\"Password\"\r\n              component={Input}\r\n              placeholder=\"Password\"\r\n              type='password'\r\n              validate={(required)}\r\n            />\r\n          </div>\r\n          {props.error &&\r\n            <div className={CraftFormsStyle.CraftForm__summaryError}>\r\n              {props.error}\r\n            </div>}\r\n          <div>\r\n            <Field\r\n              name=\"RememberMe\"\r\n              component=\"input\"\r\n              type=\"checkbox\"\r\n            />Remember Me\r\n          </div>\r\n          <div>\r\n            <button type='submit'>\r\n              Submit\r\n            </button>\r\n          </div>\r\n          \r\n          {props.captchaURL &&\r\n            <div>\r\n              <img src={props.captchaURL} alt=\"\" />\r\n              <Field\r\n                name=\"Captcha\"\r\n                component={Input}\r\n                placeholder=\"Captcha\"\r\n                validate={(required)}\r\n              />\r\n            </div>\r\n          }\r\n        </form>\r\n      )}\r\n    </Form>\r\n  )\r\n\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { login, getAuth, getCaptcha } from '../../../Redux/AuthReducer'\r\nimport { appStateType } from '../../../Redux/ReduxStore'\r\nimport { Login } from './Login'\r\n\r\ntype mapStateToPropsType = {\r\n    captchaURL: string\r\n    id: null | number\r\n    isAuthorised: boolean\r\n    error: null | Array<string>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getAuth: () => void\r\n    getCaptcha: () => void\r\n    login: (Login: string,\r\n        Password: string,\r\n        RememberMe: boolean,\r\n        Captcha: string) => void\r\n\r\n}\r\n\r\nexport type propsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nexport class UsersContainer extends React.Component<propsType> {\r\n    render() {\r\n        return (\r\n            <Login\r\n                id={this.props.id}\r\n                isAuthorised={this.props.isAuthorised}\r\n                captchaURL={this.props.captchaURL}\r\n                error={this.props.error}\r\n                login={this.props.login}\r\n                getAuth={this.props.getAuth}\r\n                getCaptcha={this.props.getCaptcha}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n    return {\r\n        id: state.Auth.id,\r\n        isAuthorised: state.Auth.isAuthorised,\r\n        captchaURL: state.Auth.captchaURL,\r\n        error: state.Auth.error\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { login, getAuth, getCaptcha })\r\n)(Login)\r\n","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (MaxLength: number) => (value: string) => {\r\n    if (value && value.length > MaxLength) return `Max length is ${MaxLength}`\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"CraftForm__block\":\"CraftForms_CraftForm__block__X5lGR\",\"CraftForm__info\":\"CraftForms_CraftForm__info__LYcNY\",\"CraftForm__infoTitle\":\"CraftForms_CraftForm__infoTitle__AFWOn\",\"CraftForm__summaryError\":\"CraftForms_CraftForm__summaryError__bjP6V\",\"CraftForm__infoLogin\":\"CraftForms_CraftForm__infoLogin__+jiHo\",\"CraftForm__error\":\"CraftForms_CraftForm__error__iaJ0q\",\"CraftForm__blockInput\":\"CraftForms_CraftForm__blockInput__SNOix\"};"],"names":["CraftForm","input","meta","props","child","hasError","touched","error","className","CraftFormsStyle","children","TextArea","placeholder","Input","Login","isAuthorised","to","id","LoginForm","onSubmit","data","getCaptcha","login","Password","RememberMe","Captcha","handleSubmit","name","component","validate","required","type","captchaURL","src","alt","UsersContainer","this","getAuth","React","compose","connect","state","Auth","value"],"sourceRoot":""}