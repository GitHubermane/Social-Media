{"version":3,"file":"static/js/494.641253d7.chunk.js","mappings":"gPAkBaA,EAAqC,SAAC,GAAqC,EAAnCC,MAAoC,IAA7BC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,OAAsB,aAC9EC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,gBAAKC,UAAWC,EAAAA,EAAAA,sBAAhB,UACI,2BACKN,EAAMO,SACNL,IAAY,iBAAMG,UAAWC,EAAAA,EAAAA,iBAAjB,0CAMhBE,EAA0B,SAACR,GACpC,OAAO,SAACH,GAAD,kBAAeG,GAAf,cAAsB,6BAAUS,YAAaT,EAAMS,aAAiBT,EAAMF,YAGxEY,EAAuB,SAACV,GACjC,OAAO,SAACH,GAAD,kBAAeG,GAAf,cAAsB,0BAAOS,YAAaT,EAAMS,aAAiBT,EAAMF,a,kICiB5Ea,EAAY,SAACX,GAEjB,IAAMY,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,cACjER,GAAQS,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKX,SACxDY,GAAWC,EAAAA,EAAAA,MAKb,OACE,SAAC,KAAD,CACEC,SANW,SAACC,GACdH,GAASI,EAAAA,EAAAA,OACTJ,GAASK,EAAAA,EAAAA,IAAMF,EAAKG,MAAOH,EAAKI,SAAUJ,EAAKK,WAAYL,EAAKM,WAGhE,SAEG,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAMR,SAAUQ,EAAhB,WACE,0BACE,SAAC,KAAD,CACEC,KAAK,QACLC,UAAWlB,EAAAA,GACXD,YAAY,QACZoB,SAAWC,EAAAA,OAGf,0BACE,SAAC,KAAD,CACEH,KAAK,WACLC,UAAWlB,EAAAA,GACXD,YAAY,WACZsB,KAAK,WACLF,SAAWC,EAAAA,MAGd1B,IACC,gBAAKC,UAAWC,EAAAA,EAAAA,wBAAhB,SACGF,KAEL,4BACE,SAAC,KAAD,CACEuB,KAAK,aACLC,UAAU,QACVG,KAAK,aAJT,kBAOA,0BACE,mBAAQA,KAAK,SAAb,sBAKDnB,IACC,4BACE,gBAAKoB,IAAKpB,EAAYqB,IAAI,MAC1B,SAAC,KAAD,CACEN,KAAK,UACLC,UAAWlB,EAAAA,GACXD,YAAY,UACZoB,SAAWC,EAAAA,cAW3B,UA1GmC,SAAC9B,GAElC,IAAMkC,GAAerB,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKmB,gBACnEC,GAAKtB,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAA0BA,EAAMC,KAAKoB,MAGxD,OAAID,GAEA,SAAC,KAAD,CAAUE,GAAE,mBAAcD,MAI1B,4BACE,mCACA,iBAAK9B,UAAWC,EAAAA,EAAAA,iBAAhB,WACE,SAACK,GAAD,UAAeX,KACf,iBAAKK,UAAWC,EAAAA,EAAAA,gBAAhB,WACE,gBAAKD,UAAWC,EAAAA,EAAAA,qBAAhB,iJAGA,gBAAKD,UAAWC,EAAAA,EAAAA,qBAAhB,wCAGA,gBAAKD,UAAWC,EAAAA,EAAAA,wBAAhB,uC,qDCnCL,IAAMwB,EAAW,SAACO,GACrB,IAAIA,EACJ,MAAO,sB,mBCDX,KAAgB,iBAAmB,qCAAqC,gBAAkB,oCAAoC,qBAAuB,yCAAyC,wBAA0B,4CAA4C,qBAAuB,yCAAyC,iBAAmB,qCAAqC,sBAAwB","sources":["Components/Commons/CraftForms.tsx","Components/Content/Login/Login.tsx","Components/Utils/Validators.ts","webpack://project/./src/Components/Commons/CraftForms.module.css?a41f"],"sourcesContent":["import React from 'react'\r\nimport { FieldInputProps, FieldMetaState } from 'react-final-form';\r\n//@ts-ignore\r\nimport CraftFormsStyle from './CraftForms.module.css'\r\n\r\ntype propsType = {\r\n    children: undefined | typeof React.Children \r\n    input: FieldInputProps<string | number | undefined, HTMLElement>;\r\n    meta: any\r\n    placeholder: string\r\n    render: any\r\n}\r\ntype craftFormType = {\r\n    input: FieldInputProps<string | number | undefined, HTMLElement>;\r\n    meta: any;\r\n    children: undefined | typeof React.Children\r\n    child: any\r\n}\r\nexport const CraftForm: React.FC<craftFormType> = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={CraftFormsStyle.CraftForm__blockInput}>\r\n            <div>\r\n                {props.children}\r\n                {hasError && <span className={CraftFormsStyle.CraftForm__error}>This Field is required</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<any> = (props) => {\r\n    return <CraftForm {...props}><textarea placeholder={props.placeholder} {...props.input}/></CraftForm>\r\n}\r\n\r\nexport const Input: React.FC<any> = (props) => {\r\n    return <CraftForm {...props}><input placeholder={props.placeholder} {...props.input}/></CraftForm>\r\n}\r\n","import React from 'react'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { getCaptcha, login } from '../../../Redux/AuthReducer'\r\nimport { appStateType } from '../../../Redux/ReduxStore'\r\nimport { Input } from '../../Commons/CraftForms'\r\nimport { required } from '../../Utils/Validators'\r\n//@ts-ignore\r\nimport CraftFormsStyle from './../../Commons/CraftForms.module.css'\r\n\r\ntype propsType = {}\r\nconst Login: React.FC<propsType> = (props) => {\r\n  debugger\r\n  const isAuthorised = useSelector((state: appStateType) => state.Auth.isAuthorised),\r\n    id = useSelector((state: appStateType) =>  state.Auth.id)\r\n\r\n\r\n  if (isAuthorised) {\r\n    return (\r\n      <Navigate to={`/profile/${id}`} />\r\n    )\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n        <div className={CraftFormsStyle.CraftForm__block}>\r\n          <LoginForm {...props} />\r\n          <div className={CraftFormsStyle.CraftForm__info}>\r\n            <div className={CraftFormsStyle.CraftForm__infoTitle}>\r\n              Логин и пароль для гостей\r\n            </div>\r\n            <div className={CraftFormsStyle.CraftForm__infoLogin}>\r\n              Login: free@samuraijs.com\r\n            </div>\r\n            <div className={CraftFormsStyle.CraftForm__infoPassword}>\r\n              Password: free\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\ntype onSubmitDataType = {\r\n  Login: string\r\n  Password: string\r\n  RememberMe: boolean\r\n  Captcha: string\r\n}\r\nconst LoginForm = (props: propsType) => {\r\n\r\n  const captchaURL = useSelector((state: appStateType) => state.Auth.captchaURL),\r\n    error = useSelector((state: appStateType) => state.Auth.error),\r\n    dispatch = useDispatch()\r\n  let onSubmit = (data: onSubmitDataType) => {\r\n    dispatch(getCaptcha())\r\n    dispatch(login(data.Login, data.Password, data.RememberMe, data.Captcha))\r\n  }\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}>\r\n      {({ handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <Field\r\n              name=\"Login\"\r\n              component={Input}\r\n              placeholder=\"Login\"\r\n              validate={(required)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Field\r\n              name=\"Password\"\r\n              component={Input}\r\n              placeholder=\"Password\"\r\n              type='password'\r\n              validate={(required)}\r\n            />\r\n          </div>\r\n          {error &&\r\n            <div className={CraftFormsStyle.CraftForm__summaryError}>\r\n              {error}\r\n            </div>}\r\n          <div>\r\n            <Field\r\n              name=\"RememberMe\"\r\n              component=\"input\"\r\n              type=\"checkbox\"\r\n            />Remember Me\r\n          </div>\r\n          <div>\r\n            <button type='submit'>\r\n              Submit\r\n            </button>\r\n          </div>\r\n\r\n          {captchaURL &&\r\n            <div>\r\n              <img src={captchaURL} alt=\"\" />\r\n              <Field\r\n                name=\"Captcha\"\r\n                component={Input}\r\n                placeholder=\"Captcha\"\r\n                validate={(required)}\r\n              />\r\n            </div>\r\n          }\r\n        </form>\r\n      )}\r\n    </Form>\r\n  )\r\n\r\n}\r\n\r\nexport default Login","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (MaxLength: number) => (value: string) => {\r\n    if (value && value.length > MaxLength) return `Max length is ${MaxLength}`\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"CraftForm__block\":\"CraftForms_CraftForm__block__X5lGR\",\"CraftForm__info\":\"CraftForms_CraftForm__info__LYcNY\",\"CraftForm__infoTitle\":\"CraftForms_CraftForm__infoTitle__AFWOn\",\"CraftForm__summaryError\":\"CraftForms_CraftForm__summaryError__bjP6V\",\"CraftForm__infoLogin\":\"CraftForms_CraftForm__infoLogin__+jiHo\",\"CraftForm__error\":\"CraftForms_CraftForm__error__iaJ0q\",\"CraftForm__blockInput\":\"CraftForms_CraftForm__blockInput__SNOix\"};"],"names":["CraftForm","input","meta","props","child","hasError","touched","error","className","CraftFormsStyle","children","TextArea","placeholder","Input","LoginForm","captchaURL","useSelector","state","Auth","dispatch","useDispatch","onSubmit","data","getCaptcha","login","Login","Password","RememberMe","Captcha","handleSubmit","name","component","validate","required","type","src","alt","isAuthorised","id","to","value"],"sourceRoot":""}