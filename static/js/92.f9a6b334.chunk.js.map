{"version":3,"file":"static/js/92.f9a6b334.chunk.js","mappings":"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","sources":["Components/Commons/CraftForms.tsx","webpack://project/./src/Components/Content/Profile/Posts/Posts.module.css?040d","Components/Content/Profile/Posts/Posts.tsx","webpack://project/./src/Components/Content/Profile/Profile.module.css?3c04","Components/Content/Profile/ProfileStatus.tsx","Components/Content/Profile/ProfileInfo.tsx","Components/Content/Profile/Profile.tsx","Redux/Selectors.ts","Components/Content/Profile/ProfileContainer.tsx","Components/HOC/WithRouter.tsx","Components/Utils/Validators.ts","webpack://project/./src/Components/Commons/CraftForms.module.css?a41f"],"sourcesContent":["import React from 'react'\r\nimport { FieldInputProps, FieldMetaState } from 'react-final-form';\r\n//@ts-ignore\r\nimport CraftFormsStyle from './CraftForms.module.css'\r\n\r\ntype propsType = {\r\n    children: undefined | typeof React.Children \r\n    input: FieldInputProps<string | number | undefined, HTMLElement>;\r\n    meta: any\r\n    placeholder: string\r\n    render: any\r\n}\r\ntype craftFormType = {\r\n    input: FieldInputProps<string | number | undefined, HTMLElement>;\r\n    meta: any;\r\n    children: undefined | typeof React.Children\r\n    child: any\r\n}\r\nexport const CraftForm: React.FC<craftFormType> = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={CraftFormsStyle.CraftForm__blockInput}>\r\n            <div>\r\n                {props.children}\r\n                {hasError && <span className={CraftFormsStyle.CraftForm__error}>This Field is required</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<any> = (props) => {\r\n    return <CraftForm {...props}><textarea placeholder={props.placeholder} {...props.input}/></CraftForm>\r\n}\r\n\r\nexport const Input: React.FC<any> = (props) => {\r\n    return <CraftForm {...props}><input placeholder={props.placeholder} {...props.input}/></CraftForm>\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Posts_post__u62A2\",\"post__img\":\"Posts_post__img__nFvZU\",\"post__content\":\"Posts_post__content__ebnN0\",\"post__likes\":\"Posts_post__likes__JG70o\"};","import React from 'react'\r\n//@ts-ignore\r\nimport PostsStyle from './Posts.module.css'\r\n\r\ntype postsPropsType = {\r\n    photo: string | null\r\n    id: number | null\r\n    key: number | null\r\n    likes: number | null\r\n    text: string | null\r\n}\r\nexport const Posts: React.FC<postsPropsType> = (props) => {\r\n  return (\r\n      <div className={PostsStyle.post}>\r\n          <img className={PostsStyle.post__img} src={props.photo || \"https://flyclipart.com/thumb2/user-icon-png-pnglogocom-133466.png\"} alt=\"\" />\r\n        <div className={PostsStyle.post__content}>\r\n            <p className={PostsStyle.post__text}>\r\n                {props.text}\r\n            </p>\r\n            <div className={PostsStyle.post__likes}>\r\n                Likes: {props.likes}\r\n            </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profile__userBlock\":\"Profile_profile__userBlock__oN9lz\",\"profile__img\":\"Profile_profile__img__yH7fn\",\"profile__userName\":\"Profile_profile__userName__DjBCb\",\"profile__userInfo\":\"Profile_profile__userInfo__z1fg5\",\"profile__userContent\":\"Profile_profile__userContent__Dyg4J\",\"profile__btn\":\"Profile_profile__btn__JsC1U\",\"profile__li\":\"Profile_profile__li__TrVbA\",\"profile__ul\":\"Profile_profile__ul__ayGsY\",\"profile__status\":\"Profile_profile__status__crndA\"};","import React, { ChangeEvent, useEffect, useState } from 'react'\r\n//@ts-ignore\r\nimport ProfileStyle from './Profile.module.css';\r\n\r\ntype propsType = {\r\n  updateUserStatus: (status: string) => void\r\n  status: string \r\n  isOwner: boolean\r\n}\r\nexport const ProfileStatus: React.FC<propsType> = (props) => {\r\n  let [editMode, setEitMode] = useState(false),\r\n    [status, setStatus] = useState(props.status)\r\n\r\n  const activate = () => {\r\n    setEitMode(true)\r\n  }\r\n  const deactivate = () => {\r\n    setEitMode(false)\r\n    props.updateUserStatus(status)\r\n  }\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  useEffect(\r\n    () => {setStatus(props.status)},\r\n    [props.status]\r\n  )\r\n  return (\r\n    <div>\r\n      {editMode && props.isOwner ?\r\n        <input\r\n          onChange={onStatusChange}\r\n          type=\"text\"\r\n          onBlur={() => deactivate()}\r\n          value={status}\r\n        /> :\r\n        <div\r\n          className={ProfileStyle.profile__status}\r\n          onDoubleClick={() => activate()}\r\n        >\r\n          {status}\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { contactsType, profileType } from '../../../Types/ReducersTypes';\r\n//@ts-ignore\r\nimport ProfileStyle from './Profile.module.css';\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    updateInfo: (info: any) => void\r\n}\r\nexport const ProfileInfo: React.FC<propsType> = ({ profile, ...props }) => {\r\n    let [profileEditMode, setProfileEditMode] = useState(false)\r\n    const activateProfileEditMode = () => {\r\n        setProfileEditMode(true)\r\n    }\r\n    const deactivateProfileEditMode = () => {\r\n        setProfileEditMode(false)\r\n    }\r\n    const onProfileInfoSubmit = (e: Event) => {\r\n        props.updateInfo(e);\r\n        deactivateProfileEditMode()\r\n    }\r\n    return (\r\n        <div>\r\n            {!profileEditMode ?\r\n                <div>\r\n                    <ul className={ProfileStyle.profile__ul}>\r\n                        {profile.aboutMe && <li className={ProfileStyle.profile__li}>About Me: {profile.aboutMe}</li>}\r\n                        {profile.lookingForAJob && <li className={ProfileStyle.profile__li}>Looking for a job: {profile.lookingForAJob}</li>}\r\n                        {profile.lookingForAJob &&\r\n                            <li className={ProfileStyle.profile__li}>Looking for a job description: {profile.lookingForAJobDescription}</li>}\r\n                        <li className={ProfileStyle.profile__li}>Full name: {profile.fullName}</li>\r\n                        <ul>Contacts: {Object.keys(profile.contacts).map((obj) => {\r\n                            return (\r\n                                <li\r\n                                    className={ProfileStyle.profile__li}\r\n                                    key={obj}>\r\n                                    {obj}: {profile.contacts[obj as keyof contactsType] || 'none'}\r\n                                </li>\r\n                            )\r\n                        })}</ul>\r\n                    </ul>\r\n                    <div>\r\n                        {props.isOwner &&\r\n                            <button\r\n                                className={ProfileStyle.profile__btn}\r\n                                onClick={activateProfileEditMode}>\r\n                                Change profile info\r\n                            </button>}\r\n                    </div>\r\n                </div> :\r\n\r\n                <div>\r\n                    <Form\r\n                        onSubmit={onProfileInfoSubmit}>\r\n                        {({ handleSubmit }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div>\r\n                                    <Field\r\n                                        name=\"fullName\"\r\n                                        component=\"input\"\r\n                                        placeholder=\"Enter your Fullname\"\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    Looking for a job\r\n                                    <Field\r\n                                        name=\"lookingForAJob\"\r\n                                        component=\"input\"\r\n                                        type=\"checkbox\"\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <Field\r\n                                        name=\"lookingForAJobDescription\"\r\n                                        component=\"input\"\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    About me\r\n                                    <Field\r\n                                        name=\"aboutMe\"\r\n                                        component=\"input\"\r\n                                    />\r\n                                </div>\r\n                                <ul>\r\n                                    Contacts: {Object.keys(profile.contacts).map((obj) => {\r\n                                        return (\r\n                                            <li>{obj}\r\n                                                <Field\r\n                                                    name={`contacts.${obj}`}\r\n                                                    component=\"input\"\r\n                                                    placeholder={`Enter your ${obj} adress`}\r\n                                                />\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                </ul>\r\n                                <div>\r\n                                    <button\r\n                                        className={ProfileStyle.profile__btn}\r\n                                        type='submit'>\r\n                                        Save Changes\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n                    </Form>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport { Posts } from './Posts/Posts';\r\n//@ts-ignore\r\nimport ProfileStyle from './Profile.module.css';\r\nimport { Preloader } from '../../Commons/Preloader'\r\nimport { ProfileStatus } from './ProfileStatus';\r\nimport { Field, Form } from 'react-final-form';\r\nimport { required, maxLengthCreator } from '../../Utils/Validators'\r\nimport { Input, TextArea } from '../../Commons/CraftForms';\r\nimport { ProfileInfo } from './ProfileInfo';\r\nimport { propsType, routerType } from './ProfileContainer';\r\n\r\n\r\ntype profilePropsType = propsType & { isOwner: boolean }\r\nexport const Profile: React.FC<profilePropsType> = (props) => {\r\n  let postElements = props.postData.map(\r\n    post => <Posts\r\n      photo={props.profile ?\r\n        props.profile.photos.large :\r\n        \"https://flyclipart.com/thumb2/user-icon-png-pnglogocom-133466.png\"\r\n      }\r\n      id={post.id}\r\n      key={post.id}\r\n      likes={post.likes}\r\n      text={post.text} />)\r\n\r\n\r\n  /*   const onPhotoSelect: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n      let target: HTMLInputElement| null = e.target\r\n      let file: FileList | null = target.files[0]\r\n      props.savePhoto(file);\r\n    } */\r\n\r\n  const onPhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      props.savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n  const onSendMessage = (message: string) => {\r\n    props.sendMessage(props.profile.userId, message)\r\n  }\r\n  if (!props.profile) {\r\n    return (\r\n      <Preloader />\r\n    )\r\n  }\r\n  return (\r\n    <div className={ProfileStyle.profile}>\r\n      <div className={ProfileStyle.profile__body}>\r\n        <div className={ProfileStyle.profile__userBlock}>\r\n          <img\r\n            className={ProfileStyle.profile__img}\r\n            src={!props.profile.photos.large ?\r\n              \"https://flyclipart.com/thumb2/user-icon-png-pnglogocom-133466.png\" :\r\n              props.profile.photos.large\r\n            } />\r\n          <div className={ProfileStyle.profile__userContent}>\r\n            <h1 className={ProfileStyle.profile__userName}>\r\n              {props.profile.fullName}\r\n            </h1>\r\n            <ProfileStatus\r\n              isOwner={props.isOwner}\r\n              status={props.status}\r\n              updateUserStatus={props.updateUserStatus} />\r\n            <ProfileInfo\r\n              isOwner={props.isOwner}\r\n              profile={props.profile}\r\n              updateInfo={props.updateInfo}\r\n            />\r\n\r\n            {/* Временно */}\r\n            {!props.isOwner &&\r\n              <Form\r\n                onSubmit={onSendMessage}\r\n                render={({ handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                      <Field\r\n                        name=\"Message\"\r\n                        component={Input}\r\n                        placeholder=\"Message\"\r\n                      />\r\n                    </div>\r\n                    <button type='submit'>\r\n                      Send Message\r\n                    </button>\r\n                  </form>\r\n                )}\r\n              />\r\n            }\r\n\r\n          </div>\r\n        </div>\r\n        {props.isOwner &&\r\n          <input\r\n            className={ProfileStyle.photoInput}\r\n            type=\"file\"\r\n            onChange={onPhotoSelect} />}\r\n        {props.isOwner &&\r\n          <div>\r\n            <PostForm {...props} />\r\n          </div>}\r\n        {postElements}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// const composeValidators = (...validators) => (value) =>\r\n//   validators.reduce((error, validator) => error || validator(value), undefined)\r\n\r\nconst PostForm = (props: propsType) => {\r\n  let onSetPostClick = (postText: { Post: string }) => {\r\n    props.addPost(postText.Post)\r\n    postText.Post = ''\r\n  }\r\n  return (\r\n    <Form\r\n      onSubmit={onSetPostClick}\r\n      render={({ handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <Field\r\n              name=\"Post\"\r\n              component={TextArea}\r\n              placeholder=\"Post\"\r\n              validate={required}\r\n            />\r\n          </div>\r\n          <button\r\n            className={ProfileStyle.profile__btn}\r\n            type='submit'>\r\n            Post\r\n          </button>\r\n        </form>\r\n      )}\r\n    />\r\n\r\n  )\r\n}","import { appStateType } from \"./ReduxStore\"\r\n\r\nexport const getPostData = (state: appStateType) => {\r\n    return state.ProfilePage.PostData\r\n}\r\n\r\nexport const getPostNewText = (state: appStateType) => {\r\n    return state.ProfilePage.postNewText\r\n}\r\n\r\nexport const getProfile = (state: appStateType) => {\r\n    return state.ProfilePage.profile\r\n}\r\n\r\nexport const getStatus = (state: appStateType) => {\r\n    return state.ProfilePage.status\r\n}\r\n\r\nexport const getId = (state: appStateType) => {\r\n    return state.Auth.id\r\n}\r\n\r\nexport const getMessagesData = (state: appStateType) => {\r\n    return state.MessagesPage.MessagesData\r\n}","import React, { ComponentType, ReactComponentElement } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux';\r\nimport {\r\n  actions, getUserId, getUserStatus,\r\n  updateUserStatus, savePhoto, updateInfo,\r\n} from '../../../Redux/ProfileReducer'\r\nimport { sendMessage } from '../../../Redux/MessageReducer'\r\nimport { Profile } from './Profile';\r\nimport {\r\n  getId, getMessagesData, getPostData,\r\n  getPostNewText, getProfile, getStatus\r\n} from '../../../Redux/Selectors';\r\nimport { MessagesDataType, PostDataType, profileType } from '../../../Types/ReducersTypes';\r\nimport { appStateType } from '../../../Redux/ReduxStore';\r\nimport { withRouter } from '../../HOC/WithRouter';\r\n\r\ntype mapStateToPropsType = {\r\n  postData: Array<PostDataType>\r\n  postNewText: string\r\n  profile: profileType\r\n  status: string\r\n  selfId: number\r\n  MessagesData: MessagesDataType\r\n}\r\ntype mapDispatchToPropsType = {\r\n  addPost: (postText: string) => void\r\n  getUserId: (userId: number) => void\r\n  getUserStatus: (userId: number) => void\r\n  updateUserStatus: (status: string) => void\r\n  savePhoto: (photo: any) => void\r\n  updateInfo: (profileInfo: profileType) => void\r\n  sendMessage: (userId: number, message: string) => void\r\n  startChatting: (userId: number) => void\r\n}\r\nexport type routerType = {\r\n  router: {\r\n    location: {\r\n      hash: string\r\n      key: string\r\n      pathname: string\r\n      search: string\r\n      state: string\r\n    }\r\n    navigate: any\r\n    params: {\r\n      userId: number\r\n    }\r\n  }\r\n}\r\ntype ownPropsType = routerType\r\nexport type propsType = mapStateToPropsType & mapDispatchToPropsType & ownPropsType\r\n\r\nclass ProfileAPI extends React.Component<propsType> {\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId;\r\n    this.props.getUserId(userId)\r\n    this.props.getUserStatus(userId)\r\n    // this.props.startChatting(userId)\r\n  }\r\n\r\n  componentDidUpdate(prevProps: propsType) {\r\n    let userId: any = this.props.router.params.userId;\r\n    if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n      this.props.getUserId(userId)\r\n      this.props.getUserStatus(userId)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={this.props.router.params.userId == this.props.selfId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateUserStatus={this.props.updateUserStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        updateInfo={this.props.updateInfo}\r\n        MessagesData={this.props.MessagesData}\r\n        sendMessage={this.props.sendMessage} />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n  return {\r\n    postData: getPostData(state),\r\n    postNewText: getPostNewText(state),\r\n    profile: getProfile(state),\r\n    status: getStatus(state),\r\n    selfId: getId(state),\r\n    MessagesData: getMessagesData(state)\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    ...actions, getUserId, getUserStatus,\r\n    updateUserStatus, savePhoto, updateInfo,\r\n    sendMessage\r\n  }),\r\n  withRouter,\r\n)(ProfileAPI)\r\n\r\n","import { ComponentType } from \"react\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { routerType } from \"../Content/Profile/ProfileContainer\";\r\n\r\nexport function withRouter<WP extends routerType>(WrappedComponent: ComponentType<WP>) {\r\n    const ComponentWithRouterProp: React.FC<Omit<WP, 'router'>> = (props) => {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <WrappedComponent\r\n                {...props as WP}\r\n                router={{ location, navigate, params }\r\n                }\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (MaxLength: number) => (value: string) => {\r\n    if (value && value.length > MaxLength) return `Max length is ${MaxLength}`\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"CraftForm__block\":\"CraftForms_CraftForm__block__X5lGR\",\"CraftForm__info\":\"CraftForms_CraftForm__info__LYcNY\",\"CraftForm__infoTitle\":\"CraftForms_CraftForm__infoTitle__AFWOn\",\"CraftForm__summaryError\":\"CraftForms_CraftForm__summaryError__bjP6V\",\"CraftForm__infoLogin\":\"CraftForms_CraftForm__infoLogin__+jiHo\",\"CraftForm__error\":\"CraftForms_CraftForm__error__iaJ0q\",\"CraftForm__blockInput\":\"CraftForms_CraftForm__blockInput__SNOix\"};"],"names":["CraftForm","input","meta","props","child","hasError","touched","error","className","CraftFormsStyle","children","TextArea","placeholder","Input","Posts","PostsStyle","src","photo","alt","text","likes","ProfileStatus","useState","editMode","setEitMode","status","setStatus","useEffect","isOwner","onChange","e","currentTarget","value","type","onBlur","updateUserStatus","ProfileStyle","onDoubleClick","ProfileInfo","profile","profileEditMode","setProfileEditMode","onSubmit","updateInfo","handleSubmit","name","component","Object","keys","contacts","map","obj","aboutMe","lookingForAJob","lookingForAJobDescription","fullName","onClick","Profile","postElements","postData","post","photos","large","id","message","sendMessage","userId","render","target","files","savePhoto","PostForm","Preloader","postText","addPost","Post","validate","required","getPostData","state","ProfilePage","PostData","getPostNewText","postNewText","getProfile","getStatus","getId","Auth","getMessagesData","MessagesPage","MessagesData","ProfileAPI","this","router","params","getUserId","getUserStatus","prevProps","selfId","React","compose","connect","actions","WrappedComponent","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}